---
---
<!-- Back to Top Button -->
<a id="back-to-top" href="#home" class="hidden fixed bottom-8 right-8 bg-gray-800 text-white w-12 h-12 rounded-full shadow-lg opacity-80 hover:opacity-100 transition-opacity duration-300 z-50 flex items-center justify-center">
<i class="fas fa-arrow-up"></i>
</a>
<script>
// Mobile Menu Toggle (Slide)
document.addEventListener('DOMContentLoaded', () => {
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  if (!mobileMenuButton || !mobileMenu) {
    console.warn("Mobile menu elements not found.");
    return;
  }

  let isMenuOpen = false;

  mobileMenuButton.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;

    mobileMenu.classList.toggle('max-h-0', !isMenuOpen);
    mobileMenu.classList.toggle('max-h-[400px]', isMenuOpen);
    mobileMenu.setAttribute("aria-expanded", !isMenuOpen);
  });
});
   
   // Smooth scrolling for navigation links
   document.querySelectorAll('a[href^="#"]').forEach(anchor => {
       anchor.addEventListener('click', function(e) {
           e.preventDefault();
           
           const targetId = this.getAttribute('href');
           const targetElement = document.querySelector(targetId);
           
           if (targetElement) {
               window.scrollTo({
                   top: targetElement.offsetTop - 80,
                   behavior: 'smooth'
               });
               
               // Close mobile menu if open
               mobileMenu.classList.add('hidden');
           }
       });
   });
   
   // Back to Top Button
   const backToTopButton = document.getElementById('back-to-top');
   
   window.addEventListener('scroll', () => {
       if (window.pageYOffset > 300) {
           backToTopButton.classList.remove('hidden');
       } else {
           backToTopButton.classList.add('hidden');
       }
   });
   
   
   // Navbar background change on scroll
   const navbar = document.getElementById('navbar');
   
   window.addEventListener('scroll', () => {
       if (window.pageYOffset > 50) {
           navbar.classList.add('shadow-md');
           navbar.classList.remove('bg-opacity-90');
           navbar.classList.add('bg-opacity-100');
       } else {
           navbar.classList.remove('shadow-md');
           navbar.classList.remove('bg-opacity-100');
           navbar.classList.add('bg-opacity-90');
       }
   });
   
   document.addEventListener("DOMContentLoaded", () => {
   const modal = document.getElementById("modal");
   const openBtnsHTMLElement = document.getElementsByClassName("modal");
   const closeBtn = document.getElementById("closeModal");

  const openBtns = [...openBtnsHTMLElement];

  for (const openBtn of openBtns) {
     openBtn.addEventListener("click", (e) => {
       e.preventDefault();
       modal.classList.remove("hidden");
     });
  }
   
   closeBtn.addEventListener("click", () => {
   modal.classList.add("hidden");
   });
   
   // Optional: close modal when clicking outside of it
   modal.addEventListener("click", (e) => {
   if (e.target === modal) {
   modal.classList.add("hidden");
   }
   });
   });
const track = document.getElementById("image-track");
const impressions = document.getElementById("impressions");

const handleOnDown = e => {
  track.dataset.mouseDownAt = e.clientX;
};

const handleOnUp = () => {
  track.dataset.mouseDownAt = "0";  
  track.dataset.prevPercentage = track.dataset.percentage;
};

const handleOnMove = e => {
  if (track.dataset.mouseDownAt === "0") return;

  const mouseDelta = parseFloat(track.dataset.mouseDownAt) - e.clientX;
  const maxDelta = window.innerWidth / 2;

  // Sensitivity factor: lower = less extreme movement
  const sensitivity = window.innerWidth < 1000 ? 0.5 : 1;

  const percentage = (mouseDelta / maxDelta) * -100 * sensitivity;
  const nextPercentageUnconstrained = parseFloat(track.dataset.prevPercentage || "0") + percentage;
  const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);

  track.dataset.percentage = nextPercentage;

  track.animate({
    transform: `translate(${nextPercentage}%, -50%)`
  }, { duration: 1200, fill: "forwards" });

  for (const image of track.getElementsByClassName("gallery-Image")) {
    image.animate({
      objectPosition: `${100 + nextPercentage}% center`
    }, { duration: 1200, fill: "forwards" });
  }
};

// Attach events to #impressions instead of window
impressions.addEventListener("mousedown", e => handleOnDown(e));
impressions.addEventListener("touchstart", e => handleOnDown(e.touches[0]));

impressions.addEventListener("mouseup", e => handleOnUp(e));
impressions.addEventListener("touchend", e => handleOnUp(e.touches[0]));

impressions.addEventListener("mousemove", e => handleOnMove(e));
impressions.addEventListener("touchmove", e => handleOnMove(e.touches[0]));
</script>
